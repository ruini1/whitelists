--[[
    hentai.exe, started on Saturday, Aug 28, 2021 5:16 PM
 
    -- NOTE FROM LINUX RELEASING COZ 1. SHIT 2. PASTED 3. IDC ABT THIS NEVER RELEASED AND DEAD PROJECT
]]
getgenv().scriptKey = "";
getgenv().websiteKey = "";

-->> Local Variables <<--
local host = "https://oreus.xyz/%s";
local scriptKey = getgenv().scriptKey or "";
local websiteKey = getgenv().websiteKey or "";
local exploit = (syn and not is_sirhurt_closure and not pebc_execute and "Synapse") or (secure_load and "Sentinel") or (pebc_execute and "ProtoSmasher") or (is_sirhurt_closure and "SirHurt") or (KRNL_LOADED and "Krnl") or nil
local req = (exploit == "Synapse" and syn.request) or ((exploit == "Sentinel" or exploit == "Krnl") and request) or (exploit == "ProtoSmasher" or exploit == "SirHurt" and http_request) 

-->> Checking some stuff :sunglasses: thx wally and psu <<--
if pebc_execute then
end
if is_synapse_function(type) or is_synapse_function(typeof) then
	return (function()
		while true do end
	end)()
elseif islclosure(type) or islclosure(typeof) then
	return (function()
		while true do end
	end)()
end

if not exploit then 
    game:GetService("Players").LocalPlayer:Kick("Unsupported exploit");
end

if not scriptKey then
    game:GetService("Players").LocalPlayer:Kick("scriptKey not found");
end

if not websiteKey then
    game:GetService("Players").LocalPlayer:Kick("websiteKey not found");
end

-->> Utility <<--
function findindex(table, value, multi)
    if not multi then
        for i,v in next, table do 
            if v == value then 
                return i;
            end
        end
    else 
        local result = {};
        while true do 
            for i,v in next, table do 
                if v == value and (not findindex(result, i)) then
                    result[i] = i;
                    continue;
                end
            end
            break;
        end
        return result;
    end
        
    return nil;
end

-->> Initiation Of Vex Secure V4.0.0 <<--
local function crack_log(reason_id) 
    local reason = hash(reason_id) --internal reason database to prevent debugging
    local success,body = pcall(http_service.JSONEncode,http_service,{value=reason})
    assert(success,body)
    local response = r({
        Url = host:format("check1"),
        Method = "POST",
        Body = body,
        Headers = {
            ["Content-Type"] = "application/json"
        }
    })
    --[[ Uncomment for release
    game.Players.LocalPlayer:Kick("Whitelist failed [Error Code "..tostring(reason_id).."]")
    while true do end
    ]]
    print("Whitelist failed [Error Code "..tostring(reason_id).."]")
    return false
end

local init
if syn then
    init = getfenv(saveinstance).script
end
--anti hook
script.Name = "\1"
local function search_hookfunc(tbl)
    for i,v in pairs(tbl) do
        local s = getfenv(v).script
        if is_synapse_function(v) and islclosure(v) and s and s ~= script and s.Name ~= "\1" and s ~= init then
            if unpack(debug.getconstants(v)):match("hookfunc") then
                --while true do end
                break
            end
        end
    end
end
search_hookfunc(getgc())
search_hookfunc = nil

--anti eq
function eq_checkv1(v1, v2)
    local start = tick();
    local eq_table = {values = {}, indexes = {}};
    
    local v3 = tostring(v1);
    local v4 = tostring(v2);

    for i = 10, 14 do 
        v3, v4 = v4:reverse():sub(0, v4:len()), v3:reverse():sub(0, v3:len());
        eq_table.values[i*10+math.random(math.random(1,100),math.random(1000,10000))] = v3;
        eq_table.values[i*20+math.random(math.random(1,100),math.random(1000,10000))] = v4;
    end 
    
    local stack = debug.getstack(1);
    for i,v in next, eq_table.values do 
        if not table.find(stack, v) then 
            return false;
        else 
            for i2,v2 in next, findindex(stack,v,true) do 
                eq_table.indexes[i] = v2;
                debug.setstack(1, v2, i)
            end
        end
    end
    local newstack = debug.getstack(1);
    
    return (v1 == v2) and (eq_table.values[v1] == eq_table.values[v2]) and (stack[eq_table.indexes[v1]] == stack[eq_table.indexes[v2]]);
end

local function generate_order()
    math.randomseed(tick()/4)
    local options = {}
    local new_options = {}
    while #options ~= 3 do
        local num = math.random(1,3) 
        if not new_options[num] then
            table.insert(options,num)
            new_options[num] = true
        end
    end
    return options
end
local function eq_chevkv2(v1,v2)
    math.randomseed(tick()/4)
    local charset = "ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz1234567890"
    if type(v1) == "string" and type(v2) == "string" then
        local length1,length2,chars_1,chars_2 = #v1,#v2,{},{}
        v1:gsub(".",function(s)chars_1[#chars_1+1]=s end)
        v2:gsub(".",function(s)chars_2[#chars_2+1]=s end)
        if (length1~=length2) then
            return false
        end
        local start = math.random(1,length1)
        local bool = true
        for i,v in pairs(generate_order()) do
            if v == 1 then
                for i=1,start do
                    local operation_type = math.random(1,4)
                    if operation_type == 1 then
                        if not not (chars_1[i] ~= chars_2[i]) then bool = false end
                    elseif operation_type == 2 then
                        if not (chars_1[i] == chars_2[i]) then bool = false end 
                    elseif operation_type == 3 then
                        if not not (chars_2[i] ~= chars_1[i]) then bool = false end
                    elseif operation_type == 4 then
                        if not (chars_2[i] == chars_1[i]) then bool = false end 
                    end
                end  
            elseif v == 2 then
                math.randomseed(tick()/2)
                for i=1,math.random(1,20) do
                    local num_1,num_2 = math.random(1,#charset),math.random(1,#charset)
                    local char_1,char_2 = charset:sub(num_1,num_1),charset:sub(num_2,num_2)
                    local operation_type = math.random(1,4)
                    if operation_type == 1 then
                        if not not (num_1 ~= num_2) then end
                    elseif operation_type == 2 then
                        if not (num_1 == num_2) then end 
                    elseif operation_type == 3 then
                        if not not (num_1 ~= num_2) then end
                    elseif operation_type == 4 then
                        if not (num_1 == num_2) then end 
                    end
                end  
            elseif v == 3 then
                for i=1,length1-start do
                    local operation_type = math.random(1,4)
                    if operation_type == 1 then
                        if not not (chars_1[i] ~= chars_2[i]) then bool = false end
                    elseif operation_type == 2 then
                        if not (chars_1[i] == chars_2[i]) then bool = false end 
                    elseif operation_type == 3 then
                        if not not (chars_2[i] ~= chars_1[i]) then bool = false end
                    elseif operation_type == 4 then
                        if not (chars_2[i] == chars_1[i]) then bool = false end 
                    end
                end
            end
        end
        return bool
    else 
        return false
    end
end

function eq(v1, v2)
    local v3 = tostring(v1);
    local v4 = tostring(v2);
	local c1 = not(v1<v2 or v1>v2);
	local c2 = (#v3 >= #v4) and (#v3 <= #v4);
    local c3 = v3:find(v4);
    local c4 = eq_checkv1(v1, v2); --might remove this from base eq since its slow
    local c5 = eq_chevkv2(v1, v2);
	return newcclosure(function()
	    if c1 and c2 and c3 and c4 and v5 then 
	        return true 
	    else 
	        return false 
	    end 
	end)()
end


-->> EQ Integrity <<--
local function random_string(len)
    math.randomseed(tick()/4)
    local charset = "ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz1234567890"
    local built_string = ""
    for i=1,len do
        local char = math.random(1,#charset)
        built_string = built_string..charset:sub(char,char)
    end
    return built_string
end
local str = random_string(64)

if not eq_chevkv2(str,str) then
    crack_log("1")
    --while true do end
end
if eq_chevkv2(str,game) then
    crack_log("1")
    --while true do end
end

-- basic functions
function request(url)
    return r({
        Url = url;
    }).Body;
end

-->> Anti Detour Function <<--

local funcs = {}
local function check(tbl)
    local bool = false
    for i,v in pairs(tbl) do 
        if type(v) == "function" and getfenv(v).script ~= script and getfenv(v).script ~= init then
            bool = true
        elseif type(v) == "table" then
            if check(v) then
                bool = true
            end
        end
    end
    return bool 
end
if check(getgenv()) then
    crack_log("2")
    --while true do end
end

-->> Anti Math.Random Hook <<--
if getgenv().math.random ~= getrenv().math.random then
    crack_log("3")
    --while true do end
end
math.randomseed(tick())
local num1 = math.random(1,10^9)
math.randomseed(tick()/2)
local num2 = math.random(1,10^9)
if num1 == num2 then
    crack_log("3")
    --while true do end
end
-- anti string.sub hook 
if getgenv().string.sub ~= getrenv().string.sub then 
    crack_log("3");
    --while true do end
end


local str = random_string(10);
if string.sub(str, 1, math.random(1,5)) == string.sub(str, 5, math.random(5,10)) then 
    crack_log("3")
end

local nstr = "";
local strt = {};
for i = 1, 10 do
    local s = string.sub(str,i,i);
     nstr = nstr..s
end

if (str ~= nstr) or (str ~= table.concat(strt)) then 
    print('bad')
end

-->> Anti Spy <<--

local hook = hookfunction or hookfunc or replace_closure
local hooks = {}
pcall(function() -- fuck compatability me and my homies hate compatibility
    hooks[1] = hook(print,function(...)if(tostring(...):match(":8080")) then crack_log("9")return ""end return hooks[1](...)end)
    hooks[2] = hook(warn,function(...)if(tostring(...):match(":8080")) then crack_log("9")return ""end return hooks[2](...)end)
    hooks[3] = hook(appendfile,function(...)if(tostring(...):match(":8080")) then crack_log("9")return ""end return hooks[3](...)end)
    hooks[4] = hook(writefile,function(...)if(tostring(...):match(":8080")) then crack_log("9")return ""end return hooks[4](...)end)
end)
game:HttpGet(host:format("/script.lua"))

-->> Anti os.time Hook <<--
if getgenv().os.time ~= getrenv().os.time then
    crack_log("3")
    --while true do end
end

local bool = true
spawn(function()
    bool = false
    local old = os.time()
    while wait(2) do
        local time = os.time()
        if time == old then
            old = time
            crack_log("3")
            break
        end
        local date1 = os.date("!*t",time)
        local date2 = os.date("!*t",time+60)
        if date1.min == 59 and date2.min ~= 0 then
            crack_log("3")
        elseif date1.min+1 ~= date2.min then
            crack_log("3")
        end
    end
end)
wait()
while bool do end

-->> Anti os.date hook <<--
if getgenv().os.date ~= getrenv().os.date then
    crack_log("3")
end

-->> Anti JMP <<--
local function tween_check(var)
    local frame = Instance.new("Frame")
    frame.Parent = game.Workspace
    frame:TweenSize(UDim2.new(1/0,1/0,1/0,1/0),Enum.EasingDirection.InOut,Enum.EasingStyle.Sine,100)
    frame:TweenSize(UDim2.new(0,0,0,0),Enum.EasingDirection.InOut,Enum.EasingStyle.Sine,0.1,var)
    wait()
    if frame.Size.X.Scale == 1/0 then
        crack_log("4")
    end
    --for i=1,frame.Size.X.Scale do end
end
local str = random_string(64)
local part = Instance.new("Part")
local part2 = Instance.new("Part",part)
local part3 = Instance.new("Part",part2)
part3.Name = str
local function ffc_check(var)
    if part:FindFirstChild(str,var) ~= part3 then
        crack_log("4")
        --while true do end
    end
end

local function IsHooked(func)
    if islclosure(func) then
        return true 
    end
	local info = debug.getinfo(func)
    if info.source ~= "=[C]" or info.short_src ~= "[C]" or info.what ~= "C" then
        return true
    end
    return false
end
-->> Encryption <<--

local hmac

do
    local unpack, table_concat, byte, char, string_rep, sub, string_format, floor, ceil, min, max =
        table.unpack or unpack,
        table.concat,
        string.byte,
        string.char,
        string.rep,
        string.sub,
        string.format,
        math.floor,
        math.ceil,
        math.min,
        math.max
    shared.unpack = unpack
    local AND, OR, XOR, SHL, SHR, ROL, ROR, HEX
    local function SHL(x, n)
        return (x * 2 ^ n) % 4294967296
    end

    local function SHR(x, n)
        x = x % 4294967296 / 2 ^ n
        return x - x % 1
    end

    local function ROL(x, n)
        x = x % 4294967296 * 2 ^ n
        local r = x % 4294967296
        return r + (x - r) / 4294967296
    end

    local function ROR(x, n)
        x = x % 4294967296 / 2 ^ n
        local r = x % 1
        return r * 4294967296 + (x - r)
    end

    local AND_of_two_bytes = {}
    for idx = 0, 65535 do
        local x = idx % 256
        local y = (idx - x) / 256
        local res = 0
        local w = 1
        while x * y ~= 0 do
            local rx = x % 2
            local ry = y % 2
            res = res + rx * ry * w
            x = (x - rx) / 2
            y = (y - ry) / 2
            w = w * 2
        end
        AND_of_two_bytes[idx] = res
    end

    local function and_or_xor(x, y, operation)
        local x0 = x % 4294967296
        local y0 = y % 4294967296
        local rx = x0 % 256
        local ry = y0 % 256
        local res = AND_of_two_bytes[rx + ry * 256]
        x = x0 - rx
        y = (y0 - ry) / 256
        rx = x % 65536
        ry = y % 256
        res = res + AND_of_two_bytes[rx + ry] * 256
        x = (x - rx) / 256
        y = (y - ry) / 256
        rx = x % 65536 + y % 256
        res = res + AND_of_two_bytes[rx] * 65536
        res = res + AND_of_two_bytes[(x + y - rx) / 256] * 16777216
        if operation then
            res = x0 + y0 - operation * res
        end
        return res
    end

    local function AND(x, y)
        return and_or_xor(x, y)
    end

    local function OR(x, y)
        return and_or_xor(x, y, 1)
    end

    local function XOR(x, y, z)
        if z then
            y = and_or_xor(y, z, 2)
        end
        return and_or_xor(x, y, 2)
    end

    local function HEX(x)
        return string_format("%08x", x % 4294967296)
    end
    local sha2_K_lo, sha2_K_hi, sha2_H_lo, sha2_H_hi = {}, {}, {}, {}
    local sha2_H_ext256 = {
        [224] = {},
        [256] = sha2_H_hi
    }
    local sha2_H_ext512_lo, sha2_H_ext512_hi = {
            [384] = {},
            [512] = sha2_H_lo
        },
        {
            [384] = {},
            [512] = sha2_H_hi
        }

    local common_W = {} -- a temporary table shared between all calculations

    local function sha256_feed_64(H, K, str, W, offs, size)
        -- offs >= 0, size >= 0, size is multiple of 64
        for pos = offs, size + offs - 1, 64 do
            for j = 1, 16 do
                pos = pos + 4
                local a, b, c, d = byte(str, pos - 3, pos)
                W[j] = ((a * 256 + b) * 256 + c) * 256 + d
            end
            for j = 17, 64 do
                local a, b = W[j - 15], W[j - 2]
                W[j] =
                    XOR(ROR(a, 7), ROL(a, 14), SHR(a, 3)) + XOR(ROL(b, 15), ROL(b, 13), SHR(b, 10)) + W[j - 7] +
                    W[j - 16]
            end
            local a, b, c, d, e, f, g, h, z = H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8]
            for j = 1, 64 do
                z = XOR(ROR(e, 6), ROR(e, 11), ROL(e, 7)) + AND(e, f) + AND(-1 - e, g) + h + K[j] + W[j]
                h = g
                g = f
                f = e
                e = z + d
                d = c
                c = b
                b = a
                a = z + AND(d, c) + AND(a, XOR(d, c)) + XOR(ROR(a, 2), ROR(a, 13), ROL(a, 10))
            end
            H[1], H[2], H[3], H[4] =
                (a + H[1]) % 4294967296,
                (b + H[2]) % 4294967296,
                (c + H[3]) % 4294967296,
                (d + H[4]) % 4294967296
            H[5], H[6], H[7], H[8] =
                (e + H[5]) % 4294967296,
                (f + H[6]) % 4294967296,
                (g + H[7]) % 4294967296,
                (h + H[8]) % 4294967296
        end
    end

    local function sha512_feed_128(H_lo, H_hi, K_lo, K_hi, str, W, offs, size)
        -- offs >= 0, size >= 0, size is multiple of 128
        -- W1_hi, W1_lo, W2_hi, W2_lo, ...   Wk_hi = W[2*k-1], Wk_lo = W[2*k]
        for pos = offs, size + offs - 1, 128 do
            for j = 1, 32 do
                pos = pos + 4
                local a, b, c, d = byte(str, pos - 3, pos)
                W[j] = ((a * 256 + b) * 256 + c) * 256 + d
            end
            local tmp1, tmp2
            for jj = 17 * 2, 80 * 2, 2 do
                local a_lo, a_hi, b_lo, b_hi = W[jj - 30], W[jj - 31], W[jj - 4], W[jj - 5]
                tmp1 =
                    XOR(SHR(a_lo, 1) + SHL(a_hi, 31), SHR(a_lo, 8) + SHL(a_hi, 24), SHR(a_lo, 7) + SHL(a_hi, 25)) +
                    XOR(SHR(b_lo, 19) + SHL(b_hi, 13), SHL(b_lo, 3) + SHR(b_hi, 29), SHR(b_lo, 6) + SHL(b_hi, 26)) +
                    W[jj - 14] +
                    W[jj - 32]
                tmp2 = tmp1 % 4294967296
                W[jj - 1] =
                    XOR(SHR(a_hi, 1) + SHL(a_lo, 31), SHR(a_hi, 8) + SHL(a_lo, 24), SHR(a_hi, 7)) +
                    XOR(SHR(b_hi, 19) + SHL(b_lo, 13), SHL(b_hi, 3) + SHR(b_lo, 29), SHR(b_hi, 6)) +
                    W[jj - 15] +
                    W[jj - 33] +
                    (tmp1 - tmp2) / 4294967296
                W[jj] = tmp2
            end
            local a_lo, b_lo, c_lo, d_lo, e_lo, f_lo, g_lo, h_lo, z_lo =
                H_lo[1],
                H_lo[2],
                H_lo[3],
                H_lo[4],
                H_lo[5],
                H_lo[6],
                H_lo[7],
                H_lo[8]
            local a_hi, b_hi, c_hi, d_hi, e_hi, f_hi, g_hi, h_hi, z_hi =
                H_hi[1],
                H_hi[2],
                H_hi[3],
                H_hi[4],
                H_hi[5],
                H_hi[6],
                H_hi[7],
                H_hi[8]
            for j = 1, 80 do
                local jj = 2 * j
                tmp1 =
                    XOR(SHR(e_lo, 14) + SHL(e_hi, 18), SHR(e_lo, 18) + SHL(e_hi, 14), SHL(e_lo, 23) + SHR(e_hi, 9)) +
                    AND(e_lo, f_lo) +
                    AND(-1 - e_lo, g_lo) +
                    h_lo +
                    K_lo[j] +
                    W[jj]
                z_lo = tmp1 % 4294967296
                z_hi =
                    XOR(SHR(e_hi, 14) + SHL(e_lo, 18), SHR(e_hi, 18) + SHL(e_lo, 14), SHL(e_hi, 23) + SHR(e_lo, 9)) +
                    AND(e_hi, f_hi) +
                    AND(-1 - e_hi, g_hi) +
                    h_hi +
                    K_hi[j] +
                    W[jj - 1] +
                    (tmp1 - z_lo) / 4294967296
                h_lo = g_lo
                h_hi = g_hi
                g_lo = f_lo
                g_hi = f_hi
                f_lo = e_lo
                f_hi = e_hi
                tmp1 = z_lo + d_lo
                e_lo = tmp1 % 4294967296
                e_hi = z_hi + d_hi + (tmp1 - e_lo) / 4294967296
                d_lo = c_lo
                d_hi = c_hi
                c_lo = b_lo
                c_hi = b_hi
                b_lo = a_lo
                b_hi = a_hi
                tmp1 =
                    z_lo + AND(d_lo, c_lo) + AND(b_lo, XOR(d_lo, c_lo)) +
                    XOR(SHR(b_lo, 28) + SHL(b_hi, 4), SHL(b_lo, 30) + SHR(b_hi, 2), SHL(b_lo, 25) + SHR(b_hi, 7))
                a_lo = tmp1 % 4294967296
                a_hi =
                    z_hi + (AND(d_hi, c_hi) + AND(b_hi, XOR(d_hi, c_hi))) +
                    XOR(SHR(b_hi, 28) + SHL(b_lo, 4), SHL(b_hi, 30) + SHR(b_lo, 2), SHL(b_hi, 25) + SHR(b_lo, 7)) +
                    (tmp1 - a_lo) / 4294967296
            end
            tmp1 = H_lo[1] + a_lo
            tmp2 = tmp1 % 4294967296
            H_lo[1], H_hi[1] = tmp2, (H_hi[1] + a_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
            tmp1 = H_lo[2] + b_lo
            tmp2 = tmp1 % 4294967296
            H_lo[2], H_hi[2] = tmp2, (H_hi[2] + b_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
            tmp1 = H_lo[3] + c_lo
            tmp2 = tmp1 % 4294967296
            H_lo[3], H_hi[3] = tmp2, (H_hi[3] + c_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
            tmp1 = H_lo[4] + d_lo
            tmp2 = tmp1 % 4294967296
            H_lo[4], H_hi[4] = tmp2, (H_hi[4] + d_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
            tmp1 = H_lo[5] + e_lo
            tmp2 = tmp1 % 4294967296
            H_lo[5], H_hi[5] = tmp2, (H_hi[5] + e_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
            tmp1 = H_lo[6] + f_lo
            tmp2 = tmp1 % 4294967296
            H_lo[6], H_hi[6] = tmp2, (H_hi[6] + f_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
            tmp1 = H_lo[7] + g_lo
            tmp2 = tmp1 % 4294967296
            H_lo[7], H_hi[7] = tmp2, (H_hi[7] + g_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
            tmp1 = H_lo[8] + h_lo
            tmp2 = tmp1 % 4294967296
            H_lo[8], H_hi[8] = tmp2, (H_hi[8] + h_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
        end
    end
    do
        local function mul(src1, src2, factor, result_length)
            -- Long arithmetic multiplication: src1 * src2 * factor
            -- src1, src2 - long integers (arrays of digits in base 2^24)
            -- factor - short integer
            local result = {}
            local carry = 0
            local value = 0.0
            local weight = 1.0
            for j = 1, result_length do
                local prod = 0
                for k = max(1, j + 1 - #src2), min(j, #src1) do
                    prod = prod + src1[k] * src2[j + 1 - k]
                end
                carry = carry + prod * factor
                local digit = carry % 16777216
                result[j] = digit
                carry = floor(carry / 16777216)
                value = value + digit * weight
                weight = weight * 2 ^ 24
            end
            return result, value -- long integer -- and its floating point approximation
        end

        local idx, step, p, one =
            0,
            {
                4,
                1,
                2,
                -2,
                2
            },
            4,
            {
                1
            }
        local sqrt_hi, sqrt_lo, idx_disp = sha2_H_hi, sha2_H_lo, 0
        repeat
            p = p + step[p % 6]
            local d = 1
            repeat
                d = d + step[d % 6]
                if d * d > p then
                    idx = idx + 1
                    local root = p ^ (1 / 3)
                    local R =
                        mul(
                        {
                            floor(root * 2 ^ 40)
                        },
                        one,
                        1,
                        2
                    )
                    local _, delta = mul(R, mul(R, R, 1, 4), -1, 4)
                    local hi = R[2] % 65536 * 65536 + floor(R[1] / 256)
                    local lo = R[1] % 256 * 16777216 + floor(delta * (2 ^ -56 / 3) * root / p)
                    sha2_K_hi[idx], sha2_K_lo[idx] = hi, lo
                    if idx < 17 then
                        root = p ^ (1 / 2)
                        R =
                            mul(
                            {
                                floor(root * 2 ^ 40)
                            },
                            one,
                            1,
                            2
                        )
                        _, delta = mul(R, R, -1, 2)
                        hi = R[2] % 65536 * 65536 + floor(R[1] / 256)
                        lo = R[1] % 256 * 16777216 + floor(delta * 2 ^ -17 / root)
                        sha2_H_ext256[224][idx + idx_disp] = lo
                        sqrt_hi[idx + idx_disp], sqrt_lo[idx + idx_disp] = hi, lo
                        if idx == 8 then
                            sqrt_hi, sqrt_lo, idx_disp = sha2_H_ext512_hi[384], sha2_H_ext512_lo[384], -8
                        end
                    end
                    break
                end
            until p % d == 0
        until idx > 79
    end

    -- Calculating IV for SHA512/224 and SHA512/256
    for width = 224, 256, 32 do
        local H_lo, H_hi = {}, {}
        for j = 1, 8 do
            H_lo[j] = XOR(sha2_H_lo[j], 0xa5a5a5a5)
            H_hi[j] = XOR(sha2_H_hi[j], 0xa5a5a5a5)
        end
        sha512_feed_128(
            H_lo,
            H_hi,
            sha2_K_lo,
            sha2_K_hi,
            "SHA-512/" .. tonumber(width) .. "\128" .. string_rep("\0", 115) .. "\88",
            common_W,
            0,
            128
        )
        sha2_H_ext512_lo[width] = H_lo
        sha2_H_ext512_hi[width] = H_hi
    end

    --------------------------------------------------------------------------------
    -- FINAL FUNCTIONS
    --------------------------------------------------------------------------------

    local function sha512ext(width, text)
        -- Create an instance (private objects for current calculation)
        local length, tail, H_lo, H_hi =
            0,
            "",
            {
                unpack(sha2_H_ext512_lo[width])
            },
            {
                unpack(sha2_H_ext512_hi[width])
            }

        local function partial(text_part)
            if text_part then
                if tail then
                    length = length + #text_part
                    local offs = 0
                    if tail ~= "" and #tail + #text_part >= 128 then
                        offs = 128 - #tail
                        sha512_feed_128(
                            H_lo,
                            H_hi,
                            sha2_K_lo,
                            sha2_K_hi,
                            tail .. sub(text_part, 1, offs),
                            common_W,
                            0,
                            128
                        )
                        tail = ""
                    end
                    local size = #text_part - offs
                    local size_tail = size % 128
                    sha512_feed_128(H_lo, H_hi, sha2_K_lo, sha2_K_hi, text_part, common_W, offs, size - size_tail)
                    tail = tail .. sub(text_part, #text_part + 1 - size_tail)
                    return partial
                else
                    error("Adding more chunks is not allowed after asking for final result", 2)
                end
            else
                if tail then
                    local final_blocks = {
                        tail,
                        "\128",
                        string_rep("\0", (-17 - length) % 128 + 9)
                    }
                    tail = nil
                    -- Assuming user data length is shorter than 2^53 bytes
                    -- 2^53 bytes = 2^56 bits, so "bit-counter" fits in 7 bytes
                    length = length * (8 / 256 ^ 7) -- convert "byte-counter" to "bit-counter" and move floating point to the left
                    for j = 4, 10 do
                        length = length % 1 * 256
                        final_blocks[j] = char(floor(length))
                    end
                    final_blocks = table_concat(final_blocks)
                    sha512_feed_128(H_lo, H_hi, sha2_K_lo, sha2_K_hi, final_blocks, common_W, 0, #final_blocks)
                    local max_reg = ceil(width / 64)
                    for j = 1, max_reg do
                        H_lo[j] = HEX(H_hi[j]) .. HEX(H_lo[j])
                    end
                    H_hi = nil
                    H_lo = table_concat(H_lo, "", 1, max_reg):sub(1, width / 4)
                end
                return H_lo
            end
        end

        if text then
            -- Actually perform calculations and return the SHA256 digest of a message
            return partial(text)()
        else
            -- Return function for partial chunk loading
            -- User should feed every chunks of input data as single argument to this function and receive SHA256 digest by invoking this function without an argument
            return partial
        end
    end

    function hmac(secret, data)
        return sha512ext(512, secret .. data .. secret)
    end -- Init sha library
end

local chars = {}

for i = ("a"):byte(), ("z"):byte() do
    table.insert(chars, string.char(i))
end

for i = ("A"):byte(), ("Z"):byte() do
    table.insert(chars, string.char(i))
end

for i = ("0"):byte(), ("9"):byte() do
    table.insert(chars, string.char(i))
end

-->> Skid Finder v4 <<--
local fake_ips = {
    "74.170.79.8",
    "152.9.51.74",
    "234.158.28.147",
    "118.97.2.102",
    "34.32.180.131",
    "240.146.15.219",
    "112.240.234.51",
    "76.181.38.219",
    "185.92.44.199",
    "236.212.171.251",
    "135.63.48.202",
    "256.155.113.237",
    "104.221.50.118",
    "170.3.99.29",
    "11.251.131.134",
    "8.237.226.113",
    "191.11.115.201",
    "243.119.135.108",
    "119.62.91.197",
    "28.7.184.236",
    "79.89.34.233",
    "41.119.7.196",
    "48.172.177.36",
    "0.14.155.222",
    "119.235.232.247"
}

local fake_webhooks = {}

for i = 1,100 do 
   local fakeips = math.random(1,255).."."..math.random(1,255).."."..math.random(1,255).."."..math.random(1,255) -- i know str.format exists I was lazy shut up
   table.insert(fake_ips,fakeips)
end

local char = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}

local number = {'1',"2","3","4","5","6","7","8","9"}

function getRandomString(length)
	local str = ''
	for i=1,length do
	local randomchar = char[math.random(1,#char)]
	randomchar = string.upper(randomchar)
	str = str .. randomchar
	end
	return str
end

function getrandomnumber(length)
	local str = ''
	for i=1,length do
	local randomchar = number[math.random(1,#number)]
	randomchar = string.upper(randomchar)
	str = str .. randomchar
	end
	return str
end

for i = 1,1000 do 
   local a =  math.random(1,3)
   local msg 
   if a == 1 then
     msg = "https://canary.discord.com/api/webhooks/"..getrandomnumber(18).."/"..getRandomString(68)
   elseif a == 2 then
     msg = "https://ptb.discord.com/api/webhooks/"..getrandomnumber(18).."/"..getRandomString(68)

   elseif a == 3 then
     msg = "https://discord.com/api/webhooks/"..getrandomnumber(18).."/"..getRandomString(68)
   end
   table.insert(fake_webhooks,msg)
end
-- Honeypot users into thinking this is a plaintext ip database
local real_ip = game:HttpGet("https://api.ipify.org") 
for i,v in pairs(fake_ips) do
    if v == real_ip then
        crack_log("5")
    end
end

local disabled = true;
function disableFunc(func)
       hookfunction(func, newcclosure(function()
              if disabled then
                game:shutdown()
              end
     end))
end

DisableFunc(print)
DisableFunc(warn)
DisableFunc(error)
DisableFunc(setclipboard)
DisableFunc(rconsoleprint)
DisableFunc(rconsolewarn)
DisableFunc(rconsoleerr)
DisableFunc(printconsole)
DisableFunc(rconsolename)
DisableFunc(writefile)
DisableFunc(appendfile)

local backupHF = hookfunc

hookfunction(hookfunction,newcclosure(function(func) 
    for i,v in next,{print,warn,error,rconsolewarn,rconsoleerr,printconsole,writefile,appendfile,setclipboard,rconsoleprint} do
        if func==v then
            return game:shutdown()
        end
    end        
    return backupHF(func)
end))

-->> Check Whitelist <<--
if request(host.."Api/whitelist/checkWhitelist?scriptKey="..scriptKey) == "true" then 
    print'whitelisted';
else 
    print'not whitelisted';
end

-- NOTE FROM LINUX RELEASING COZ 1. SHIT 2. PASTED 3. IDC ABT THIS NEVER RELEASED AND DEAD PROJECT
